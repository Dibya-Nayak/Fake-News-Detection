
import pandas as pd
import numpy as np


import re
import nltk
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
from nltk.stem import PorterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer


from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.linear_model import LogisticRegression


data = pd.read_csv("news.csv")


X = data['text']
y = data['label']


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


tfidf_vectorizer = TfidfVectorizer(max_features=5000) 
X_train_tfidf = tfidf_vectorizer.fit_transform(X_train)
X_test_tfidf = tfidf_vectorizer.transform(X_test)


model = LogisticRegression(max_iter=1000) 
model.fit(X_train_tfidf, y_train)


y_pred = model.predict(X_test_tfidf)


accuracy = accuracy_score(y_test, y_pred)
report = classification_report(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)



import streamlit as st


model = LogisticRegression(max_iter=1000)
tfidf_vectorizer = TfidfVectorizer(max_features=5000)


data = pd.read_csv("news.csv")
X = data['text']
y = data['label']
X_tfidf = tfidf_vectorizer.fit_transform(X)
model.fit(X_tfidf, y)


st.title("Fake News Detection App")


user_input = st.text_area("Enter the news text:")
if st.button("Predict"):
    user_input_tfidf = tfidf_vectorizer.transform([user_input])
    prediction = model.predict(user_input_tfidf)
    st.write("Prediction:", prediction[0])
